--------------------------------------------------------
--  File created - Monday-August-19-2024   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table API_SERVICE
--------------------------------------------------------

  CREATE TABLE "API_SERVICE" 
   (	"API_SERVICE_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"SERVICE_NAME" VARCHAR2(200), 
	"CREATED_AT" DATE, 
	"UPDATED_AT" DATE, 
	"UNIQUE_KEY" VARCHAR2(200)
   ) ;
--------------------------------------------------------
--  DDL for Table COMPANY_INFO
--------------------------------------------------------

  CREATE TABLE "COMPANY_INFO" 
   (	"COMPANY_INFO_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ORGANIZATION_NAME" VARCHAR2(100), 
	"COMMERCIAL_RECORD_IMG" VARCHAR2(100), 
	"LOGO_IMAGE" VARCHAR2(100), 
	"DESCRIPTION" VARCHAR2(500), 
	"CREATED_AT" DATE, 
	"UPDATED_AT" DATE, 
	"DELETED_AT" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table EXAM
--------------------------------------------------------

  CREATE TABLE "EXAM" 
   (	"EXAM_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"EXAM_NAME" VARCHAR2(50), 
	"EXAM_DURATION" NUMBER(*,0), 
	"EXAM_DESCRIPTION" CLOB, 
	"CREATED_AT" DATE, 
	"UPDATED_AT" DATE, 
	"DELETED_AT" DATE, 
	"PRICE" NUMBER(5,2)
   ) ;
--------------------------------------------------------
--  DDL for Table QUESTION
--------------------------------------------------------

  CREATE TABLE "QUESTION" 
   (	"QUESTION_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"QUESTION_LEVEL" VARCHAR2(50), 
	"QUESTION_TYPE" VARCHAR2(100), 
	"EXAM_ID" NUMBER(*,0), 
	"CREATED_AT" DATE, 
	"UPDATED_AT" DATE, 
	"DELETED_AT" DATE, 
	"QUESTION_DESCRIPTION" VARCHAR2(100)
   ) ;
--------------------------------------------------------
--  DDL for Table QUESTION_OPTION
--------------------------------------------------------

  CREATE TABLE "QUESTION_OPTION" 
   (	"OPTION_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TITLE" VARCHAR2(200), 
	"IS_CORRECT" VARCHAR2(10), 
	"QUESTION_ID" NUMBER(*,0), 
	"CREATED_AT" DATE, 
	"UPDATED_AT" DATE, 
	"DELETED_AT" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table USER_EXAM
--------------------------------------------------------

  CREATE TABLE "USER_EXAM" 
   (	"USER_EXAM_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USER_ID" NUMBER(*,0), 
	"EXAM_ID" NUMBER(*,0), 
	"UNIQUE_ID" NUMBER(*,0), 
	"SCORE_MARK" NUMBER(*,0), 
	"SCORE_RATE" VARCHAR2(10), 
	"CREATED_AT" DATE, 
	"UPDATED_AT" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table USER_INFO
--------------------------------------------------------

  CREATE TABLE "USER_INFO" 
   (	"USER_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USER_NAME" VARCHAR2(100), 
	"BIRTH_DATE" DATE, 
	"USER_EMAIL" VARCHAR2(100), 
	"USER_PASSWORD" VARCHAR2(150), 
	"ROLE_ID" NUMBER(*,0), 
	"CREATED_AT" DATE, 
	"UPDATED_AT" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table USER_ROLE
--------------------------------------------------------

  CREATE TABLE "USER_ROLE" 
   (	"ROLE_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ROLE_NAME" VARCHAR2(200), 
	"CREATED_AT" DATE, 
	"UPDATED_AT" DATE
   ) ;
REM INSERTING into API_SERVICE
SET DEFINE OFF;
Insert into API_SERVICE (API_SERVICE_ID,SERVICE_NAME,CREATED_AT,UPDATED_AT,UNIQUE_KEY) values (2,'exam guardian',to_date('05-JUL-24','DD-MON-RR'),to_date('18-AUG-24','DD-MON-RR'),'0c683142-5beb-4ccb-abb8-29d8a3ff8b49');
REM INSERTING into COMPANY_INFO
SET DEFINE OFF;
Insert into COMPANY_INFO (COMPANY_INFO_ID,ORGANIZATION_NAME,COMMERCIAL_RECORD_IMG,LOGO_IMAGE,DESCRIPTION,CREATED_AT,UPDATED_AT,DELETED_AT) values (6,'Ep Organization',null,null,'This Company is responsible for creating, managing, and delivering exams, including question banks, candidate registration, and scoring.',to_date('05-JUL-24','DD-MON-RR'),to_date('15-AUG-24','DD-MON-RR'),null);
REM INSERTING into EXAM
SET DEFINE OFF;
Insert into EXAM (EXAM_ID,EXAM_NAME,EXAM_DURATION,CREATED_AT,UPDATED_AT,DELETED_AT,PRICE) values (100060,' Angular Exam',5,to_date('18-AUG-24','DD-MON-RR'),to_date('19-AUG-24','DD-MON-RR'),null,50);
Insert into EXAM (EXAM_ID,EXAM_NAME,EXAM_DURATION,CREATED_AT,UPDATED_AT,DELETED_AT,PRICE) values (100040,'Agile Exam',5,to_date('18-AUG-24','DD-MON-RR'),to_date('18-AUG-24','DD-MON-RR'),null,50);
REM INSERTING into QUESTION
SET DEFINE OFF;
Insert into QUESTION (QUESTION_ID,QUESTION_LEVEL,QUESTION_TYPE,EXAM_ID,CREATED_AT,UPDATED_AT,DELETED_AT,QUESTION_DESCRIPTION) values (100080,'first question','multi choice',100060,to_date('18-AUG-24','DD-MON-RR'),to_date('18-AUG-24','DD-MON-RR'),null,'What is the purpose of Angular''s ngOnInit lifecycle hook?');
Insert into QUESTION (QUESTION_ID,QUESTION_LEVEL,QUESTION_TYPE,EXAM_ID,CREATED_AT,UPDATED_AT,DELETED_AT,QUESTION_DESCRIPTION) values (100084,'first question','multi choice',100060,to_date('18-AUG-24','DD-MON-RR'),to_date('18-AUG-24','DD-MON-RR'),null,'In Angular Reactive Forms, which of the following is used to create form controls and handle validat');
Insert into QUESTION (QUESTION_ID,QUESTION_LEVEL,QUESTION_TYPE,EXAM_ID,CREATED_AT,UPDATED_AT,DELETED_AT,QUESTION_DESCRIPTION) values (100061,'easy agile','multi choice',100040,to_date('18-AUG-24','DD-MON-RR'),to_date('18-AUG-24','DD-MON-RR'),null,'In Scrum, who is responsible for prioritizing the product backlog?');
Insert into QUESTION (QUESTION_ID,QUESTION_LEVEL,QUESTION_TYPE,EXAM_ID,CREATED_AT,UPDATED_AT,DELETED_AT,QUESTION_DESCRIPTION) values (100060,'easy agile','multi choice',100040,to_date('18-AUG-24','DD-MON-RR'),to_date('18-AUG-24','DD-MON-RR'),null,'What does Agile primarily focus on?');
Insert into QUESTION (QUESTION_ID,QUESTION_LEVEL,QUESTION_TYPE,EXAM_ID,CREATED_AT,UPDATED_AT,DELETED_AT,QUESTION_DESCRIPTION) values (100085,'first question','multi choice',100060,to_date('18-AUG-24','DD-MON-RR'),to_date('18-AUG-24','DD-MON-RR'),null,'Which lifecycle hook is used to perform actions after Angular has fully initialized a component s ');
Insert into QUESTION (QUESTION_ID,QUESTION_LEVEL,QUESTION_TYPE,EXAM_ID,CREATED_AT,UPDATED_AT,DELETED_AT,QUESTION_DESCRIPTION) values (100081,'first question','multi choice',100060,to_date('18-AUG-24','DD-MON-RR'),to_date('18-AUG-24','DD-MON-RR'),null,'What type of directive is ngFor in Angular?');
Insert into QUESTION (QUESTION_ID,QUESTION_LEVEL,QUESTION_TYPE,EXAM_ID,CREATED_AT,UPDATED_AT,DELETED_AT,QUESTION_DESCRIPTION) values (100063,'easy agile','multi choice',100040,to_date('18-AUG-24','DD-MON-RR'),to_date('18-AUG-24','DD-MON-RR'),null,'User stories are used to describe:');
Insert into QUESTION (QUESTION_ID,QUESTION_LEVEL,QUESTION_TYPE,EXAM_ID,CREATED_AT,UPDATED_AT,DELETED_AT,QUESTION_DESCRIPTION) values (100064,'easy agile','multi choice',100040,to_date('18-AUG-24','DD-MON-RR'),to_date('18-AUG-24','DD-MON-RR'),null,'Agile values customer collaboration over:');
Insert into QUESTION (QUESTION_ID,QUESTION_LEVEL,QUESTION_TYPE,EXAM_ID,CREATED_AT,UPDATED_AT,DELETED_AT,QUESTION_DESCRIPTION) values (100083,'first question','multi choice',100060,to_date('18-AUG-24','DD-MON-RR'),to_date('18-AUG-24','DD-MON-RR'),null,'What is the purpose of the RouterModule.forRoot() method in Angular?');
Insert into QUESTION (QUESTION_ID,QUESTION_LEVEL,QUESTION_TYPE,EXAM_ID,CREATED_AT,UPDATED_AT,DELETED_AT,QUESTION_DESCRIPTION) values (100062,'easy agile','multi choice',100040,to_date('18-AUG-24','DD-MON-RR'),to_date('18-AUG-24','DD-MON-RR'),null,'What is the daily meeting called where team members discuss progress and obstacles?');
Insert into QUESTION (QUESTION_ID,QUESTION_LEVEL,QUESTION_TYPE,EXAM_ID,CREATED_AT,UPDATED_AT,DELETED_AT,QUESTION_DESCRIPTION) values (100082,'first question','multi choice',100060,to_date('18-AUG-24','DD-MON-RR'),to_date('18-AUG-24','DD-MON-RR'),null,'How do you provide a service at the root level in Angular?');
REM INSERTING into QUESTION_OPTION
SET DEFINE OFF;
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100044,' Comprehensive documentation','true',100064,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100084,'FormGroup','false',100084,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100057,'Retrospective','false',100062,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100059,' Development Team','false',100061,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100087,'FormControl','false',100084,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100102,' By adding it to the providers array in the app.module.ts file','false',100082,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100109,'Structural Directive','false',100081,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100048,'Technical specifications','false',100063,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100049,' User needs and requirements','true',100063,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100081,'ngAfterViewInit','true',100085,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100061,'Stakeholders','false',100061,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100064,'Detailed documentation','false',100060,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100101,'To handle route guards and lazy loading','false',100083,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100108,'Custom Directive','false',100081,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100062,' Long-term contracts','false',100060,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100083,'ngOnChanges','false',100085,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100088,'NgForm','false',100084,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100090,'To set up the main application routes
','true',100083,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100104,'By importing it into a component and adding it to the providers array','false',100082,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100106,'Attribute Directive','false',100081,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100051,'Team roles','false',100063,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100054,'Sprint Planning','false',100062,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100056,'Daily Stand-up','true',100062,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100058,'Scrum Master','false',100061,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100065,'Flexibility and customer feedback','true',100060,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100082,'ngAfterContentChecked','false',100085,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100086,'FormBuilder','true',100084,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100103,'By using the @Injectable() decorator with { providedIn: ''root'' }','true',100082,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100105,' By declaring it in the imports array of the module','false',100082,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100045,'Extensive meetings','false',100064,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100052,'Project deadlines','false',100063,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100046,'Defined roles','false',100064,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100047,'Fixed processes','false',100064,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100053,'Sprint Review','false',100062,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100060,'Product Owner','true',100061,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100063,'Following a strict plan','false',100060,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100080,'ngOnInit','false',100085,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100107,'Component Directive','false',100081,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100089,'To define child routes within a module
','false',100083,to_date('18-AUG-24','DD-MON-RR'),null,null);
Insert into QUESTION_OPTION (OPTION_ID,TITLE,IS_CORRECT,QUESTION_ID,CREATED_AT,UPDATED_AT,DELETED_AT) values (100100,'To navigate to a different route programmatically','false',100083,to_date('18-AUG-24','DD-MON-RR'),null,null);
REM INSERTING into USER_EXAM
SET DEFINE OFF;
REM INSERTING into USER_INFO
SET DEFINE OFF;
Insert into USER_INFO (USER_ID,USER_NAME,BIRTH_DATE,USER_EMAIL,USER_PASSWORD,ROLE_ID,CREATED_AT,UPDATED_AT) values (69,'bayan alhassoun',null,'bayan_alhassoun@gmail.com','123456',2,to_date('06-JUL-24','DD-MON-RR'),to_date('02-AUG-24','DD-MON-RR'));
Insert into USER_INFO (USER_ID,USER_NAME,BIRTH_DATE,USER_EMAIL,USER_PASSWORD,ROLE_ID,CREATED_AT,UPDATED_AT) values (23,'Admin ',null,'admin@gmail.com','123456',1,null,to_date('02-AUG-24','DD-MON-RR'));
Insert into USER_INFO (USER_ID,USER_NAME,BIRTH_DATE,USER_EMAIL,USER_PASSWORD,ROLE_ID,CREATED_AT,UPDATED_AT) values (100000,'abdullah khrais',null,'abdullah.khraissat@gmail.com','123456',null,null,null);
REM INSERTING into USER_ROLE
SET DEFINE OFF;
Insert into USER_ROLE (ROLE_ID,ROLE_NAME,CREATED_AT,UPDATED_AT) values (1,'Admin',null,to_date('05-JUL-24','DD-MON-RR'));
Insert into USER_ROLE (ROLE_ID,ROLE_NAME,CREATED_AT,UPDATED_AT) values (2,'Student',null,null);
--------------------------------------------------------
--  DDL for Index PK_API_SERVICE_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_API_SERVICE_ID" ON "API_SERVICE" ("API_SERVICE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PK_COMPANY_INFO
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_COMPANY_INFO" ON "COMPANY_INFO" ("COMPANY_INFO_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PK_EXAM_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_EXAM_ID" ON "EXAM" ("EXAM_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PK_QUESTION_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_QUESTION_ID" ON "QUESTION" ("QUESTION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PK_QUESTION_OPTION_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_QUESTION_OPTION_ID" ON "QUESTION_OPTION" ("OPTION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PK_USER_EXAM_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_USER_EXAM_ID" ON "USER_EXAM" ("USER_EXAM_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PK_USER_INFO_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_USER_INFO_ID" ON "USER_INFO" ("USER_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PK_USER_ROLE_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_USER_ROLE_ID" ON "USER_ROLE" ("ROLE_ID") 
  ;
--------------------------------------------------------
--  DDL for Package API_SERVICE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "API_SERVICE_PACKAGE" AS
    PROCEDURE create_api_service(v_service_name API_SERVICE.SERVICE_NAME%TYPE, v_unique_key API_SERVICE.UNIQUE_KEY%TYPE);
    PROCEDURE get_api_service_by_id(v_api_service_id API_SERVICE.API_SERVICE_ID%TYPE);
    PROCEDURE get_all_api_services;
    PROCEDURE update_api_service(v_api_service_id API_SERVICE.API_SERVICE_ID%TYPE, v_service_name API_SERVICE.SERVICE_NAME%TYPE, v_unique_key API_SERVICE.UNIQUE_KEY%TYPE);
    PROCEDURE delete_api_service(v_api_service_id API_SERVICE.API_SERVICE_ID%TYPE);
END api_service_package;

/
--------------------------------------------------------
--  DDL for Package COMPANY_INFO_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPANY_INFO_PACKAGE" AS
    PROCEDURE create_company_info(
        v_organization_name COMPANY_INFO.ORGANIZATION_NAME%TYPE, 
        v_commercial_record_img COMPANY_INFO.COMMERCIAL_RECORD_IMG%TYPE,
        v_logo_image COMPANY_INFO.LOGO_IMAGE%TYPE,
        v_description COMPANY_INFO.DESCRIPTION%TYPE
    );

    PROCEDURE get_company_info_by_id(
        v_company_info_id COMPANY_INFO.COMPANY_INFO_ID%TYPE
    );

    PROCEDURE get_all_company_infos;

    PROCEDURE update_company_info(
        v_company_info_id COMPANY_INFO.COMPANY_INFO_ID%TYPE, 
        v_organization_name COMPANY_INFO.ORGANIZATION_NAME%TYPE, 
        v_commercial_record_img COMPANY_INFO.COMMERCIAL_RECORD_IMG%TYPE,
        v_logo_image COMPANY_INFO.LOGO_IMAGE%TYPE,
        v_description COMPANY_INFO.DESCRIPTION%TYPE
    );

    PROCEDURE delete_company_info_soft(
        v_company_info_id COMPANY_INFO.COMPANY_INFO_ID%TYPE
    );

    PROCEDURE delete_company_info_hard(
        v_company_info_id COMPANY_INFO.COMPANY_INFO_ID%TYPE
    );
END company_info_package;

/
--------------------------------------------------------
--  DDL for Package EXAM_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "EXAM_PACKAGE" AS
    PROCEDURE create_exam(
        v_exam_name EXAM.EXAM_NAME%TYPE,
        v_exam_duration EXAM.EXAM_DURATION%TYPE,
        v_exam_description EXAM.EXAM_DESCRIPTION%TYPE,
                 v_exam_price EXAM.PRICE%TYPE
    );

    PROCEDURE get_exam_by_id(
        v_exam_id EXAM.EXAM_ID%TYPE
    );

    PROCEDURE get_all_exams;

    PROCEDURE update_exam(
        v_exam_id EXAM.EXAM_ID%TYPE,
        v_exam_name EXAM.EXAM_NAME%TYPE,
        v_exam_duration EXAM.EXAM_DURATION%TYPE,
        v_exam_description EXAM.EXAM_DESCRIPTION%TYPE,
        v_exam_price EXAM.PRICE%TYPE
    );

    PROCEDURE delete_exam_soft(
        v_exam_id EXAM.EXAM_ID%TYPE
    );

    PROCEDURE delete_exam_hard(
        v_exam_id EXAM.EXAM_ID%TYPE
    );
END exam_package;

/
--------------------------------------------------------
--  DDL for Package QUESTION_OPTION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "QUESTION_OPTION_PACKAGE" AS

    PROCEDURE create_question_option(
        v_title IN QUESTION_OPTION.TITLE%TYPE,
        v_is_correct IN QUESTION_OPTION.IS_CORRECT%TYPE,
        v_question_id IN QUESTION_OPTION.QUESTION_ID%TYPE
    );

    PROCEDURE get_question_option_by_id(
        v_option_id IN QUESTION_OPTION.OPTION_ID%TYPE
    );

    PROCEDURE get_all_question_options;

    PROCEDURE update_question_option(
        v_option_id IN QUESTION_OPTION.OPTION_ID%TYPE,
        v_title IN QUESTION_OPTION.TITLE%TYPE,
        v_is_correct IN QUESTION_OPTION.IS_CORRECT%TYPE,
        v_question_id IN QUESTION_OPTION.QUESTION_ID%TYPE
    );

    PROCEDURE delete_question_option_hard(
        v_option_id IN QUESTION_OPTION.OPTION_ID%TYPE
    );
    PROCEDURE delete_question_option_soft(
        v_option_id IN QUESTION_OPTION.OPTION_ID%TYPE
    );
END question_option_package;

/
--------------------------------------------------------
--  DDL for Package QUESTION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "QUESTION_PACKAGE" AS
    PROCEDURE create_question(
        v_question_level QUESTION.QUESTION_LEVEL%TYPE,
        v_question_type QUESTION.QUESTION_TYPE%TYPE,
         v_question_description QUESTION.QUESTION_DESCRIPTION%TYPE,
        v_exam_id QUESTION.EXAM_ID%TYPE
    );

    PROCEDURE get_question_by_id(
        v_question_id QUESTION.QUESTION_ID%TYPE
    );

    PROCEDURE get_all_questions;

    PROCEDURE update_question(
        v_question_id QUESTION.QUESTION_ID%TYPE,
        v_question_level QUESTION.QUESTION_LEVEL%TYPE,
        v_question_type QUESTION.QUESTION_TYPE%TYPE,
          v_question_description QUESTION.QUESTION_DESCRIPTION%TYPE,
        v_exam_id QUESTION.EXAM_ID%TYPE
    );

    PROCEDURE delete_question_soft(
        v_question_id QUESTION.QUESTION_ID%TYPE
    );

    PROCEDURE delete_question_hard(
        v_question_id QUESTION.QUESTION_ID%TYPE
    );
END question_package;

/
--------------------------------------------------------
--  DDL for Package USER_EXAM_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "USER_EXAM_PACKAGE" AS

    PROCEDURE create_user_exam(
        v_user_id IN USER_EXAM.USER_ID%TYPE,
        v_exam_id IN USER_EXAM.EXAM_ID%TYPE,
        v_unique_id IN USER_EXAM.UNIQUE_ID%TYPE,
        v_score_mark IN USER_EXAM.SCORE_MARK%TYPE,
        v_score_rate IN USER_EXAM.SCORE_RATE%TYPE
    );

    PROCEDURE get_user_exam_by_id(
        v_user_exam_id IN USER_EXAM.USER_EXAM_ID%TYPE
    );

    PROCEDURE get_all_user_exams;

    PROCEDURE update_user_exam(
        v_user_exam_id IN USER_EXAM.USER_EXAM_ID%TYPE,
        v_user_id IN USER_EXAM.USER_ID%TYPE,
        v_exam_id IN USER_EXAM.EXAM_ID%TYPE,
        v_unique_id IN USER_EXAM.UNIQUE_ID%TYPE,
        v_score_mark IN USER_EXAM.SCORE_MARK%TYPE,
        v_score_rate IN USER_EXAM.SCORE_RATE%TYPE
    );

    PROCEDURE delete_user_exam(
        v_user_exam_id IN USER_EXAM.USER_EXAM_ID%TYPE
    );



END USER_EXAM_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package USER_INFO_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "USER_INFO_PACKAGE" AS

    -- Create a new user record
    PROCEDURE create_user_info(
        v_user_name IN USER_INFO.USER_NAME%TYPE,
        v_birth_date IN USER_INFO.BIRTH_DATE%TYPE,
        v_user_email IN USER_INFO.USER_EMAIL%TYPE,
        v_user_password IN USER_INFO.USER_PASSWORD%TYPE,
        v_role_id IN USER_INFO.ROLE_ID%TYPE
    );

    -- Retrieve a user record by its ID
    PROCEDURE get_user_info_by_id(
        v_user_id IN USER_INFO.USER_ID%TYPE
    );

    -- Retrieve all user records
    PROCEDURE get_all_users_info;

    -- Update an existing user record
    PROCEDURE update_user_info(
        v_user_id IN USER_INFO.USER_ID%TYPE,
        v_user_name IN USER_INFO.USER_NAME%TYPE,
        v_birth_date IN USER_INFO.BIRTH_DATE%TYPE,
        v_user_email IN USER_INFO.USER_EMAIL%TYPE,
        v_user_password IN USER_INFO.USER_PASSWORD%TYPE,
        v_role_id IN USER_INFO.ROLE_ID%TYPE
    );

    -- Delete a user record (hard delete)
    PROCEDURE delete_user_info(
        v_user_id IN USER_INFO.USER_ID%TYPE
    );

END USER_INFO_PACKAGE;


/
--------------------------------------------------------
--  DDL for Package USER_ROLE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "USER_ROLE_PACKAGE" AS

    PROCEDURE create_user_role(
        v_role_name IN USER_ROLE.ROLE_NAME%TYPE
    );

    PROCEDURE get_user_role_by_id(
        v_role_id IN USER_ROLE.ROLE_ID%TYPE
    );

    PROCEDURE get_all_user_roles;

    PROCEDURE update_user_role(
        v_role_id IN USER_ROLE.ROLE_ID%TYPE,
        v_role_name IN USER_ROLE.ROLE_NAME%TYPE
    );

    PROCEDURE delete_user_role(
        v_role_id IN USER_ROLE.ROLE_ID%TYPE
    );


END USER_ROLE_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package Body API_SERVICE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "API_SERVICE_PACKAGE" AS

    PROCEDURE create_api_service(v_service_name API_SERVICE.SERVICE_NAME%TYPE, v_unique_key API_SERVICE.UNIQUE_KEY%TYPE) AS
    BEGIN
        INSERT INTO API_SERVICE (SERVICE_NAME, CREATED_AT, UPDATED_AT, UNIQUE_KEY)
        VALUES (v_service_name, SYSDATE, null, v_unique_key);
    END create_api_service;

    PROCEDURE get_api_service_by_id(v_api_service_id API_SERVICE.API_SERVICE_ID%TYPE) AS
        c_api_service SYS_REFCURSOR;
    BEGIN
        OPEN c_api_service FOR
        SELECT * FROM API_SERVICE WHERE API_SERVICE_ID = v_api_service_id;
        DBMS_SQL.RETURN_RESULT(c_api_service);
    END get_api_service_by_id;

    PROCEDURE get_all_api_services AS
        c_api_services SYS_REFCURSOR;
    BEGIN
        OPEN c_api_services FOR
        SELECT * FROM API_SERVICE;
        DBMS_SQL.RETURN_RESULT(c_api_services);
    END get_all_api_services;

    PROCEDURE update_api_service(v_api_service_id API_SERVICE.API_SERVICE_ID%TYPE, v_service_name API_SERVICE.SERVICE_NAME%TYPE, v_unique_key API_SERVICE.UNIQUE_KEY%TYPE) AS
    BEGIN
        UPDATE API_SERVICE
        SET SERVICE_NAME = v_service_name,
            UPDATED_AT = SYSDATE,
            UNIQUE_KEY = v_unique_key
        WHERE API_SERVICE_ID = v_api_service_id;
    END update_api_service;

    PROCEDURE delete_api_service(v_api_service_id API_SERVICE.API_SERVICE_ID%TYPE) AS
    BEGIN
        DELETE FROM API_SERVICE WHERE API_SERVICE_ID = v_api_service_id;
    END delete_api_service;

END api_service_package;


/
--------------------------------------------------------
--  DDL for Package Body COMPANY_INFO_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPANY_INFO_PACKAGE" AS

    PROCEDURE create_company_info(
        v_organization_name COMPANY_INFO.ORGANIZATION_NAME%TYPE, 
        v_commercial_record_img COMPANY_INFO.COMMERCIAL_RECORD_IMG%TYPE,
        v_logo_image COMPANY_INFO.LOGO_IMAGE%TYPE,
        v_description COMPANY_INFO.DESCRIPTION%TYPE
    ) AS
    BEGIN
        INSERT INTO COMPANY_INFO (
            ORGANIZATION_NAME, 
            COMMERCIAL_RECORD_IMG, 
            LOGO_IMAGE, 
            DESCRIPTION, 
            CREATED_AT, 
            UPDATED_AT
        ) VALUES (
            v_organization_name, 
            v_commercial_record_img, 
            v_logo_image, 
            v_description, 
            SYSDATE, 
            SYSDATE
        );
    END create_company_info;

    PROCEDURE get_company_info_by_id(
        v_company_info_id COMPANY_INFO.COMPANY_INFO_ID%TYPE
    ) AS
        c_company_info SYS_REFCURSOR;
    BEGIN
        OPEN c_company_info FOR
        SELECT * FROM COMPANY_INFO WHERE COMPANY_INFO_ID = v_company_info_id;
        DBMS_SQL.RETURN_RESULT(c_company_info);
    END get_company_info_by_id;

    PROCEDURE get_all_company_infos AS
        c_company_infos SYS_REFCURSOR;
    BEGIN
        OPEN c_company_infos FOR
        SELECT * FROM COMPANY_INFO WHERE DELETED_AT IS NULL;
        DBMS_SQL.RETURN_RESULT(c_company_infos);
    END get_all_company_infos;

    PROCEDURE update_company_info(
        v_company_info_id COMPANY_INFO.COMPANY_INFO_ID%TYPE, 
        v_organization_name COMPANY_INFO.ORGANIZATION_NAME%TYPE, 
        v_commercial_record_img COMPANY_INFO.COMMERCIAL_RECORD_IMG%TYPE,
        v_logo_image COMPANY_INFO.LOGO_IMAGE%TYPE,
        v_description COMPANY_INFO.DESCRIPTION%TYPE
    ) AS
    BEGIN
        UPDATE COMPANY_INFO
        SET 
            ORGANIZATION_NAME = v_organization_name,
            COMMERCIAL_RECORD_IMG = v_commercial_record_img,
            LOGO_IMAGE = v_logo_image,
            DESCRIPTION = v_description,
            UPDATED_AT = SYSDATE
        WHERE COMPANY_INFO_ID = v_company_info_id;
    END update_company_info;

       PROCEDURE delete_company_info_soft(
        v_company_info_id COMPANY_INFO.COMPANY_INFO_ID%TYPE
    ) AS
    BEGIN
        UPDATE COMPANY_INFO
        SET 
            DELETED_AT = SYSDATE
        WHERE COMPANY_INFO_ID = v_company_info_id;
    END delete_company_info_soft;

    PROCEDURE delete_company_info_hard(
        v_company_info_id COMPANY_INFO.COMPANY_INFO_ID%TYPE
    ) AS
    BEGIN
        DELETE FROM COMPANY_INFO WHERE COMPANY_INFO_ID = v_company_info_id;
    END delete_company_info_hard;

END company_info_package;


/
--------------------------------------------------------
--  DDL for Package Body EXAM_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "EXAM_PACKAGE" AS

    PROCEDURE create_exam(
        v_exam_name EXAM.EXAM_NAME%TYPE,
        v_exam_duration EXAM.EXAM_DURATION%TYPE,
        v_exam_description EXAM.EXAM_DESCRIPTION%TYPE,
         v_exam_price EXAM.PRICE%TYPE
    ) AS
    BEGIN
        INSERT INTO EXAM (
            EXAM_NAME,
            EXAM_DURATION,
            EXAM_DESCRIPTION,
            PRICE,
            CREATED_AT,
            UPDATED_AT
        ) VALUES (
            v_exam_name,
            v_exam_duration,
            v_exam_description,
            v_exam_price,
            SYSDATE,
            SYSDATE
        );
    END create_exam;

    PROCEDURE get_exam_by_id(
        v_exam_id EXAM.EXAM_ID%TYPE
    ) AS
        c_exam SYS_REFCURSOR;
    BEGIN
        OPEN c_exam FOR
        SELECT * FROM EXAM WHERE EXAM_ID = v_exam_id AND DELETED_AT IS NULL;
        DBMS_SQL.RETURN_RESULT(c_exam);
    END get_exam_by_id;

    PROCEDURE get_all_exams AS
        c_exams SYS_REFCURSOR;
    BEGIN
        OPEN c_exams FOR
        SELECT * FROM EXAM WHERE DELETED_AT IS NULL;
        DBMS_SQL.RETURN_RESULT(c_exams);
    END get_all_exams;

    PROCEDURE update_exam(
        v_exam_id EXAM.EXAM_ID%TYPE,
        v_exam_name EXAM.EXAM_NAME%TYPE,
        v_exam_duration EXAM.EXAM_DURATION%TYPE,
        v_exam_description EXAM.EXAM_DESCRIPTION%TYPE,
                 v_exam_price EXAM.PRICE%TYPE
    ) AS
    BEGIN
        UPDATE EXAM
        SET
            EXAM_NAME = v_exam_name,
            EXAM_DURATION = v_exam_duration,
            EXAM_DESCRIPTION = v_exam_description,
            EXAM.PRICE=v_exam_price,
            UPDATED_AT = SYSDATE
        WHERE EXAM_ID = v_exam_id;
    END update_exam;

    PROCEDURE delete_exam_soft(
        v_exam_id EXAM.EXAM_ID%TYPE
    ) AS
    BEGIN
        UPDATE EXAM
        SET
            DELETED_AT = SYSDATE
        WHERE EXAM_ID = v_exam_id;
    END delete_exam_soft;

    PROCEDURE delete_exam_hard(
        v_exam_id EXAM.EXAM_ID%TYPE
    ) AS
    BEGIN
        DELETE FROM EXAM WHERE EXAM_ID = v_exam_id;
    END delete_exam_hard;

END exam_package;


/
--------------------------------------------------------
--  DDL for Package Body QUESTION_OPTION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "QUESTION_OPTION_PACKAGE" AS

    PROCEDURE create_question_option(
        v_title IN QUESTION_OPTION.TITLE%TYPE,
        v_is_correct IN QUESTION_OPTION.IS_CORRECT%TYPE,
        v_question_id IN QUESTION_OPTION.QUESTION_ID%TYPE
    ) AS
    BEGIN
        INSERT INTO QUESTION_OPTION (TITLE, IS_CORRECT, QUESTION_ID,CREATED_AT)
        VALUES (v_title, v_is_correct, v_question_id, SYSDATE);
    END create_question_option;

    PROCEDURE get_question_option_by_id(
        v_option_id IN QUESTION_OPTION.OPTION_ID%TYPE
    ) AS
        c_option SYS_REFCURSOR;
    BEGIN
        OPEN c_option FOR
        SELECT * FROM QUESTION_OPTION WHERE OPTION_ID = v_option_id;
        DBMS_SQL.RETURN_RESULT(c_option);
    END get_question_option_by_id;

    PROCEDURE get_all_question_options AS
        c_options SYS_REFCURSOR;
    BEGIN
        OPEN c_options FOR
        SELECT * FROM QUESTION_OPTION;
        DBMS_SQL.RETURN_RESULT(c_options);
    END get_all_question_options;

    PROCEDURE update_question_option(
        v_option_id IN QUESTION_OPTION.OPTION_ID%TYPE,
        v_title IN QUESTION_OPTION.TITLE%TYPE,
        v_is_correct IN QUESTION_OPTION.IS_CORRECT%TYPE,
        v_question_id IN QUESTION_OPTION.QUESTION_ID%TYPE
    ) AS
    BEGIN
        UPDATE QUESTION_OPTION
        SET TITLE = v_title,
            IS_CORRECT = v_is_correct,
            QUESTION_ID = v_question_id,
            UPDATED_AT = SYSDATE
        WHERE OPTION_ID = v_option_id;
    END update_question_option;

  PROCEDURE delete_question_option_soft(
        v_option_id IN QUESTION_OPTION.OPTION_ID%TYPE
    ) AS
    BEGIN
        UPDATE QUESTION_OPTION
        SET DELETED_AT = SYSDATE
        WHERE OPTION_ID = v_option_id;
    END delete_question_option_soft;

    PROCEDURE delete_question_option_hard(
        v_option_id IN QUESTION_OPTION.OPTION_ID%TYPE
    ) AS
    BEGIN
        DELETE FROM QUESTION_OPTION
        WHERE OPTION_ID = v_option_id;
    END delete_question_option_hard;
END question_option_package;


/
--------------------------------------------------------
--  DDL for Package Body QUESTION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "QUESTION_PACKAGE" AS

    PROCEDURE create_question(
        v_question_level QUESTION.QUESTION_LEVEL%TYPE,
        v_question_type QUESTION.QUESTION_TYPE%TYPE,
        v_question_description QUESTION.QUESTION_DESCRIPTION%TYPE,
        v_exam_id QUESTION.EXAM_ID%TYPE
    ) AS
    BEGIN
        INSERT INTO QUESTION (
            QUESTION_LEVEL,
            QUESTION_TYPE,
            question_description,
            EXAM_ID,
            CREATED_AT,
            UPDATED_AT
        ) VALUES (
            v_question_level,
            v_question_type,
            v_question_description,
            v_exam_id,
            SYSDATE,
            SYSDATE
        );
    END create_question;

    PROCEDURE get_question_by_id(
        v_question_id QUESTION.QUESTION_ID%TYPE
    ) AS
        c_question SYS_REFCURSOR;
    BEGIN
        OPEN c_question FOR
        SELECT * FROM QUESTION WHERE QUESTION_ID = v_question_id AND DELETED_AT IS NULL;
        DBMS_SQL.RETURN_RESULT(c_question);
    END get_question_by_id;

    PROCEDURE get_all_questions AS
        c_questions SYS_REFCURSOR;
    BEGIN
        OPEN c_questions FOR
        SELECT * FROM QUESTION WHERE DELETED_AT IS NULL;
        DBMS_SQL.RETURN_RESULT(c_questions);
    END get_all_questions;

    PROCEDURE update_question(
        v_question_id QUESTION.QUESTION_ID%TYPE,
        v_question_level QUESTION.QUESTION_LEVEL%TYPE,
        v_question_type QUESTION.QUESTION_TYPE%TYPE,
        v_question_description QUESTION.QUESTION_DESCRIPTION%TYPE,
        v_exam_id QUESTION.EXAM_ID%TYPE
    ) AS
    BEGIN
        UPDATE QUESTION
        SET
            QUESTION_LEVEL = v_question_level,
            QUESTION_TYPE = v_question_type,
            QUESTION_DESCRIPTION = v_question_description,
            EXAM_ID = v_exam_id,
            UPDATED_AT = SYSDATE
        WHERE QUESTION_ID = v_question_id;
    END update_question;

    PROCEDURE delete_question_soft(
        v_question_id QUESTION.QUESTION_ID%TYPE
    ) AS
    BEGIN
        UPDATE QUESTION
        SET
            DELETED_AT = SYSDATE
        WHERE QUESTION_ID = v_question_id;
    END delete_question_soft;

    PROCEDURE delete_question_hard(
        v_question_id QUESTION.QUESTION_ID%TYPE
    ) AS
    BEGIN
        DELETE FROM QUESTION WHERE QUESTION_ID = v_question_id;
    END delete_question_hard;

END question_package;


/
--------------------------------------------------------
--  DDL for Package Body USER_EXAM_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "USER_EXAM_PACKAGE" AS

    PROCEDURE create_user_exam(
        v_user_id IN USER_EXAM.USER_ID%TYPE,
        v_exam_id IN USER_EXAM.EXAM_ID%TYPE,
        v_unique_id IN USER_EXAM.UNIQUE_ID%TYPE,
        v_score_mark IN USER_EXAM.SCORE_MARK%TYPE,
        v_score_rate IN USER_EXAM.SCORE_RATE%TYPE
    ) AS
    BEGIN
        INSERT INTO USER_EXAM (USER_ID, EXAM_ID, UNIQUE_ID, SCORE_MARK, SCORE_RATE, CREATED_AT, UPDATED_AT)
        VALUES (v_user_id, v_exam_id, v_unique_id, v_score_mark, v_score_rate, SYSDATE, SYSDATE);
        COMMIT;
    END create_user_exam;

    PROCEDURE get_user_exam_by_id(
        v_user_exam_id IN USER_EXAM.USER_EXAM_ID%TYPE
    ) AS
        c_user_exam SYS_REFCURSOR;
    BEGIN
        OPEN c_user_exam FOR
        SELECT *
        FROM USER_EXAM
        WHERE USER_EXAM_ID = v_user_exam_id;
        DBMS_SQL.RETURN_RESULT(c_user_exam);
    END get_user_exam_by_id;

    PROCEDURE get_all_user_exams AS
        c_user_exams SYS_REFCURSOR;
    BEGIN
        OPEN c_user_exams FOR
        SELECT *
        FROM USER_EXAM;
        DBMS_SQL.RETURN_RESULT(c_user_exams);
    END get_all_user_exams;

    PROCEDURE update_user_exam(
        v_user_exam_id IN USER_EXAM.USER_EXAM_ID%TYPE,
        v_user_id IN USER_EXAM.USER_ID%TYPE,
        v_exam_id IN USER_EXAM.EXAM_ID%TYPE,
        v_unique_id IN USER_EXAM.UNIQUE_ID%TYPE,
        v_score_mark IN USER_EXAM.SCORE_MARK%TYPE,
        v_score_rate IN USER_EXAM.SCORE_RATE%TYPE
    ) AS
    BEGIN
        UPDATE USER_EXAM
        SET USER_ID = v_user_id,
            EXAM_ID = v_exam_id,
            UNIQUE_ID = v_unique_id,
            SCORE_MARK = v_score_mark,
            SCORE_RATE = v_score_rate,
            UPDATED_AT = SYSDATE
        WHERE USER_EXAM_ID = v_user_exam_id;
        COMMIT;
    END update_user_exam;

    PROCEDURE delete_user_exam(
        v_user_exam_id IN USER_EXAM.USER_EXAM_ID%TYPE
    ) AS
    BEGIN
        DELETE FROM USER_EXAM
        WHERE USER_EXAM_ID = v_user_exam_id;
        COMMIT;
    END delete_user_exam;


END USER_EXAM_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package Body USER_INFO_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "USER_INFO_PACKAGE" AS

    -- Create a new user record
    PROCEDURE create_user_info(
        v_user_name IN USER_INFO.USER_NAME%TYPE,
        v_birth_date IN USER_INFO.BIRTH_DATE%TYPE,
        v_user_email IN USER_INFO.USER_EMAIL%TYPE,
        v_user_password IN USER_INFO.USER_PASSWORD%TYPE,
        v_role_id IN USER_INFO.ROLE_ID%TYPE
    ) AS
    BEGIN
        INSERT INTO USER_INFO (USER_NAME, BIRTH_DATE, USER_EMAIL, USER_PASSWORD, ROLE_ID, CREATED_AT, UPDATED_AT)
        VALUES (v_user_name, v_birth_date, v_user_email, v_user_password, v_role_id, SYSDATE, SYSDATE);
        COMMIT;
    END create_user_info;

    -- Retrieve a user record by its ID
    PROCEDURE get_user_info_by_id(
        v_user_id IN USER_INFO.USER_ID%TYPE
    ) AS
        c_user SYS_REFCURSOR;
    BEGIN
        OPEN c_user FOR
        SELECT *
        FROM USER_INFO
        WHERE USER_ID = v_user_id;
        DBMS_SQL.RETURN_RESULT(c_user);
    END get_user_info_by_id;

    -- Retrieve all user records
    PROCEDURE get_all_users_info AS
        c_users SYS_REFCURSOR;
    BEGIN
        OPEN c_users FOR
        SELECT *
        FROM USER_INFO;
        DBMS_SQL.RETURN_RESULT(c_users);
    END get_all_users_info;

    -- Update an existing user record
    PROCEDURE update_user_info(
        v_user_id IN USER_INFO.USER_ID%TYPE,
        v_user_name IN USER_INFO.USER_NAME%TYPE,
        v_birth_date IN USER_INFO.BIRTH_DATE%TYPE,
        v_user_email IN USER_INFO.USER_EMAIL%TYPE,
        v_user_password IN USER_INFO.USER_PASSWORD%TYPE,
        v_role_id IN USER_INFO.ROLE_ID%TYPE
    ) AS
    BEGIN
        UPDATE USER_INFO
        SET USER_NAME = v_user_name,
            BIRTH_DATE = v_birth_date,
            USER_EMAIL = v_user_email,
            USER_PASSWORD = v_user_password,
            ROLE_ID = v_role_id,
            UPDATED_AT = SYSDATE
        WHERE USER_ID = v_user_id;
        COMMIT;
    END update_user_info;

    -- Delete a user record (hard delete)
    PROCEDURE delete_user_info(
        v_user_id IN USER_INFO.USER_ID%TYPE
    ) AS
    BEGIN
        DELETE FROM USER_INFO
        WHERE USER_ID = v_user_id;
        COMMIT;
    END delete_user_info;

END USER_INFO_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package Body USER_ROLE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "USER_ROLE_PACKAGE" AS

    -- Create a new user role
    PROCEDURE create_user_role(
        v_role_name IN USER_ROLE.ROLE_NAME%TYPE
    ) AS
    BEGIN
        INSERT INTO USER_ROLE (ROLE_NAME, CREATED_AT, UPDATED_AT)
        VALUES (v_role_name, SYSTIMESTAMP, SYSTIMESTAMP);
        COMMIT;
    END create_user_role;

    -- Retrieve a user role by its ID
    PROCEDURE get_user_role_by_id(
        v_role_id IN USER_ROLE.ROLE_ID%TYPE
    ) AS
        c_role SYS_REFCURSOR;
    BEGIN
        OPEN c_role FOR
        SELECT *
        FROM USER_ROLE
        WHERE ROLE_ID = v_role_id;
        DBMS_SQL.RETURN_RESULT(c_role);
    END get_user_role_by_id;

    -- Retrieve all user roles
    PROCEDURE get_all_user_roles AS
        c_roles SYS_REFCURSOR;
    BEGIN
        OPEN c_roles FOR
        SELECT *
        FROM USER_ROLE;
        DBMS_SQL.RETURN_RESULT(c_roles);
    END get_all_user_roles;

    -- Update an existing user role
    PROCEDURE update_user_role(
        v_role_id IN USER_ROLE.ROLE_ID%TYPE,
        v_role_name IN USER_ROLE.ROLE_NAME%TYPE
    ) AS
    BEGIN
        UPDATE USER_ROLE
        SET ROLE_NAME = v_role_name,
            UPDATED_AT = SYSTIMESTAMP
        WHERE ROLE_ID = v_role_id;
        COMMIT;
    END update_user_role;

    -- Delete a user role (hard delete)
    PROCEDURE delete_user_role(
        v_role_id IN USER_ROLE.ROLE_ID%TYPE
    ) AS
    BEGIN
        DELETE FROM USER_ROLE
        WHERE ROLE_ID = v_role_id;
        COMMIT;
    END delete_user_role;


END USER_ROLE_PACKAGE;


/
--------------------------------------------------------
--  Constraints for Table QUESTION
--------------------------------------------------------

  ALTER TABLE "QUESTION" MODIFY ("QUESTION_ID" NOT NULL ENABLE);
  ALTER TABLE "QUESTION" ADD CONSTRAINT "PK_QUESTION_ID" PRIMARY KEY ("QUESTION_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table USER_EXAM
--------------------------------------------------------

  ALTER TABLE "USER_EXAM" MODIFY ("USER_EXAM_ID" NOT NULL ENABLE);
  ALTER TABLE "USER_EXAM" ADD CONSTRAINT "PK_USER_EXAM_ID" PRIMARY KEY ("USER_EXAM_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table EXAM
--------------------------------------------------------

  ALTER TABLE "EXAM" MODIFY ("EXAM_ID" NOT NULL ENABLE);
  ALTER TABLE "EXAM" ADD CONSTRAINT "PK_EXAM_ID" PRIMARY KEY ("EXAM_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table QUESTION_OPTION
--------------------------------------------------------

  ALTER TABLE "QUESTION_OPTION" MODIFY ("OPTION_ID" NOT NULL ENABLE);
  ALTER TABLE "QUESTION_OPTION" ADD CONSTRAINT "PK_QUESTION_OPTION_ID" PRIMARY KEY ("OPTION_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table USER_ROLE
--------------------------------------------------------

  ALTER TABLE "USER_ROLE" MODIFY ("ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "USER_ROLE" ADD CONSTRAINT "PK_USER_ROLE_ID" PRIMARY KEY ("ROLE_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table COMPANY_INFO
--------------------------------------------------------

  ALTER TABLE "COMPANY_INFO" MODIFY ("COMPANY_INFO_ID" NOT NULL ENABLE);
  ALTER TABLE "COMPANY_INFO" ADD CONSTRAINT "PK_COMPANY_INFO" PRIMARY KEY ("COMPANY_INFO_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table API_SERVICE
--------------------------------------------------------

  ALTER TABLE "API_SERVICE" MODIFY ("API_SERVICE_ID" NOT NULL ENABLE);
  ALTER TABLE "API_SERVICE" ADD CONSTRAINT "PK_API_SERVICE_ID" PRIMARY KEY ("API_SERVICE_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table USER_INFO
--------------------------------------------------------

  ALTER TABLE "USER_INFO" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "USER_INFO" ADD CONSTRAINT "PK_USER_INFO_ID" PRIMARY KEY ("USER_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table QUESTION
--------------------------------------------------------

  ALTER TABLE "QUESTION" ADD CONSTRAINT "FK_EXAMID" FOREIGN KEY ("EXAM_ID")
	  REFERENCES "EXAM" ("EXAM_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table QUESTION_OPTION
--------------------------------------------------------

  ALTER TABLE "QUESTION_OPTION" ADD CONSTRAINT "FK_QUEID" FOREIGN KEY ("QUESTION_ID")
	  REFERENCES "QUESTION" ("QUESTION_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USER_EXAM
--------------------------------------------------------

  ALTER TABLE "USER_EXAM" ADD CONSTRAINT "FK_USERINFOID" FOREIGN KEY ("USER_ID")
	  REFERENCES "USER_INFO" ("USER_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "USER_EXAM" ADD CONSTRAINT "FK_EXAMINFOID" FOREIGN KEY ("EXAM_ID")
	  REFERENCES "EXAM" ("EXAM_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USER_INFO
--------------------------------------------------------

  ALTER TABLE "USER_INFO" ADD CONSTRAINT "FK_ROLEID" FOREIGN KEY ("ROLE_ID")
	  REFERENCES "USER_ROLE" ("ROLE_ID") ON DELETE CASCADE ENABLE;
